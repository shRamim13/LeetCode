class Solution
{
public:
    int networkDelayTime(vector<vector<int>> &times, int n, int k)
    {
        vector<vector<pair<int, int>>> graph(n + 1);
        for (const auto &time : times)
        {
            int u = time[0], v = time[1], w = time[2];
            graph[u].push_back({v, w});
        }

        vector<int> dis(n + 1, 1e9);
        priority_queue<pair<int, int>, vector<pair<int, int>>,
                       greater<pair<int, int>>>
            pq;
        pq.push({0, k});
        dis[k] = 0;

        while (!pq.empty())
        {
            int node = pq.top().second;
            pq.pop();

            for (auto x : graph[node])
            {
                int nxtNode = x.first;
                int w = x.second;
                if (w + dis[node] < dis[nxtNode])
                {
                    dis[nxtNode] = w + dis[node];
                    pq.push({dis[nxtNode], nxtNode});
                }
            }
        }

        int ans = -1;
        for (int i = 1; i <= n; ++i)
        {
            ans = max(ans, dis[i]);
        }

        return (ans == 1e9) ? -1 : ans;
    }
};